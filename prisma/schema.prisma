datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum UserRole {
  ADMIN
  ORGANIZER
  PARTICIPANT
}

model Payment {
  id         String        @id @default(cuid())
  payment_id String
  order_id   String
  signature  String
  status     PaymentStatus @default(PENDING)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @map("user_id")

  @@index([userId])
  @@map("payments")
}

model Faculty {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  events     Event[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("faculty")
}

model Student {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  events     Event[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("students")
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String
  rules       String
  date        DateTime
  location    String
  image       String
  students    Student[]
  faculties   Faculty[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")

  @@map("events")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  role          UserRole  @default(PARTICIPANT)
  events        Event[]
  accounts      Account[]
  sessions      Session[]
  payment       Payment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
